---
title: "Quarto confluence demo"
author: "Roy Francis"
description: "This is a demo document to showase publishing from quarto to confluence."
format: html
execute:
  eval: true
---

```{r}
#| echo: false
#| message: false
#| warning: false

# data handling
library(dplyr)
library(tidyr)
library(stringr)

# tables
library(gt) # enchanced tables
library(DT) # interactive table
library(reactable) # interactive table

# graphics
library(ggplot2) # static graphics
```

## Text formatting

### Headings

```
## Level 2 heading
### Level 3 heading
#### Level 4 heading
##### Level 5 heading
###### Level 6 heading
```

### Character styles

|Markdown|Rendered|
|---|---|
|`__Bold text__`|__Bold text__|
|`_Italic text_`|_Italic text_|
|`~~Strikethrough~~`|~~Strikethrough~~|
|`H~2~O`|H~2~O|
|`x^2`|x^2|
|`--`|--|
|`---`|---|
|`[link](r-project.org)`|[link](r-project.org)|
|`{{{< kbd Shift-Ctrl-P >}}}`|{{< kbd Shift-Ctrl-P >}}|

### Blockquote

```
> This is a block quote. This
> paragraph has two lines.
>
> 1. This is a list inside a block quote.
> 2. Second item.
```

> This is a block quote. This paragraph has two lines.
>
> 1.  This is a list inside a block quote.
> 2.  Second item.

### Line block

Line block preserves spaces and new lines.

```
| This
|     block
|          preserves
|                   formatting
```

| This
|     block
|          preserves
|                   formatting

### Rule

A horizontal line can be created using three or more `*` or `-`.

`***`

------------------------------------------------------------------------

### Footnote

An example of footnote reference [^1]

[^1]: That reference refers to this footnote.

### Aside

`[This content lives in the right margin]{.aside}`

[This content lives in the right margin]{.aside}

## Code formatting

Verbatim code is text formatted using monospaced font intended as code. Verbatim code can be defined inline where `` `date()` `` looks like `date()`.

Code can also be defined inside code blocks.

````
```
date()
```
````

```
date()
```

Source code, ie; code that is highlighted or executed in a quarto document is not covered here.

## Code execution

Code can be defined inline where `` `r "\u0060r Sys.Date()\u0060"` `` renders `r Sys.Date()`.

Code can be defined inside code blocks.

````
```{{r}}
Sys.Date()
```
````

which shows the source code and output.

```{r}
Sys.Date()
```

Here is another example of executed R code with input and output.

```{r}
data(iris)
head(iris[, 1:2])
```

## Chunk attributes

Properties and behaviour of code chunks can be controlled using chunk attributes. This is specified as comment sign of the language and pipe followed by key: value. So for example, in R: `#| eval: false`.

In this example, the R source code and results are hidden but the code is evaluated.

````
```{{r}}
#| eval: true
#| echo: false
#| results: hide
Sys.Date()
```
````

A code chunk can be given a code filename using the chunk attribute `filename`.

````
```{{r}}
#| filename: R code
Sys.Date()
```
````

```{r}
#| filename: R code
#| eval: false
Sys.Date()
```

Enable line numbers using `code-line-numbers: true`.

````
```{{r}}
#| code-line-numbers: true
Sys.Date()
sessionInfo()
```
````

```{r}
#| eval: false
#| code-line-numbers: true
Sys.Date()
sessionInfo()
```

An advanced example showing bash code generated from R.

````
```{{r}}
#| attr-output: "filename='bash'"
#| class-output: bash
#| echo: false
d <- "custom"
cat(paste("mkdirâ€‹", d))
```
````

```{r}
#| attr-output: "filename='bash'"
#| class-output: bash
#| echo: false
d <- "custom"
cat(paste("mkdir<U+200B>", d))
```

Code chunk attributes are documented [here](https://quarto.org/docs/output-formats/html-code.html).

## Lists

### Unordered

Unordered lists are created using dashes.

::: {.grid}
::: {.g-col-6}

```
- Bullet 1
- Bullet 2
  - Sub-bullet 2.1
  - Sub-bullet 2.2
- Bullet 3
```

:::
::: {.g-col-6}

- Bullet 1
- Bullet 2
  - Sub-bullet 2.1
  - Sub-bullet 2.2
- Bullet 3

:::
:::

### Ordered

Ordered lists are created using numbers.

::: {.grid}
::: {.g-col-6}

```
1. Point 1
2. Point 2
3. Point 3
```

:::
::: {.g-col-6}

1. Point 1
2. Point 2
3. Point 3

:::
:::

### Multiple Lists

::: {.grid}
::: {.g-col-6}

```
::: {}
1. Point 1
2. Point 2
:::

:::{}
1. Point 1
2. Point 2
:::
```

:::
::: {.g-col-6}

::: {}
1. Point 1
2. Point 2
:::

:::{}
1. Point 1
2. Point 2
:::

:::
:::

## Images

Images can be inserted using plain markdown or HTML directly. Plain markdown can be embellished with custom quarto adjustments to modify aspects of the image. Clicking the image opens the image in a lightbox. This is made possible using the [lightbox](https://github.com/quarto-ext/lightbox) extension.

### Using Markdown

Using regular markdown.

```
![](quarto.webp)
```

![](quarto.webp)

The dimensions are based on image and/or fill up the entire available space. You can control the dimension as shown below.

```
![This is a caption](quarto.webp){width=30%}
```

![This is a caption](quarto.webp){width="30%"}

This image above is now 30% of it's original width.

#### Figure layout

```
::: {#fig-mylabel layout-ncol=2}
![Caption for figure 1](quarto.webp){width="40%"}

![Caption for figure 2](quarto.webp){width="40%"}

These figures are interesting.
:::
```

::: {#fig-mylabel layout-ncol="2"}
![Caption for figure 1](quarto.webp){width="40%"}

![Caption for figure 2](quarto.webp){width="40%"}

These figures are interesting.
:::

More figure options and layouts are described [here](https://quarto.org/docs/authoring/figures.html). Cross referencing described [here](https://quarto.org/docs/authoring/cross-references.html).

### Static images using R

Quarto chunks can be used to control image display size using the argument `out.width`.

This image below is displayed at a size of 300 pixels.

````
```{{r}}
#| out-width: 300px
knitr::include_graphics("quarto.webp")
```
````

```{r}
#| echo: false
#| out-width: "300px"
knitr::include_graphics("quarto.webp")
```

This image below is displayed at a size of 75 pixels and a caption added.

````
```{{r}}
#| out-width: 75px
#| fig-cap: This is a caption
knitr::include_graphics("quarto.webp")
```
````

```{r}
#| echo: false
#| out-width: "75px"
#| fig-cap: This is a caption
knitr::include_graphics("quarto.webp")
```

For more information on figures, see [here](https://quarto.org/docs/authoring/figures.html). For plots generated through R, see section further below.


## Math expressions

Some examples of rendering equations.

::: {.grid}
::: {.g-col-6}

```
$e^{i\pi} + 1 = 0$
```

:::
::: {.g-col-6}

$e^{i\pi} + 1 = 0$

:::
:::

::: {.grid}
::: {.g-col-6}

```
$$\frac{E \times X^2 \prod I}{2+7} = 432$$
```

:::
::: {.g-col-6}

$$\frac{E \times X^2 \prod I}{2+7} = 432$$

:::
:::

::: {.grid}
::: {.g-col-6}

```
$$\sum_{i=1}^n X_i$$
```

:::
::: {.g-col-6}

$$\sum_{i=1}^n X_i$$

:::
:::

::: {.grid}
::: {.g-col-6}

```
$$\int_0^{2\pi} \sin x~dx$$
```

:::
::: {.g-col-6}

$$\int_0^{2\pi} \sin x~dx$$

:::
:::

::: {.grid}
::: {.g-col-6}

```
$\left( \sum_{i=1}^{n}{i} \right)^2 = \left( \frac{n(n-1)}{2}\right)^2 = \frac{n^2(n-1)^2}{4}$
```

:::
::: {.g-col-6}

$\left( \sum_{i=1}^{n}{i} \right)^2 = \left( \frac{n(n-1)}{2}\right)^2 = \frac{n^2(n-1)^2}{4}$

:::
:::

::: {.grid}
::: {.g-col-6}

```
$\begin{eqnarray} X & \sim & \mathrm{N}(0,1)\\ Y & \sim & \chi^2_{n-p}\\ R & \equiv & X/Y \sim t_{n-p} \end{eqnarray}$
```

:::
::: {.g-col-6}

$\begin{eqnarray} X & \sim & \mathrm{N}(0,1)\\ Y & \sim & \chi^2_{n-p}\\ R & \equiv & X/Y \sim t_{n-p} \end{eqnarray}$

:::
:::

::: {.grid}
::: {.g-col-6}

```
$\begin{eqnarray} P(|X-\mu| > k) & = & P(|X-\mu|^2 > k^2)\\ & \leq & \frac{\mathbb{E}\left[|X-\mu|^2\right]}{k^2}\\ & \leq & \frac{\mathrm{Var}[X]}{k^2} \end{eqnarray}$
```

:::
::: {.g-col-6}

$\begin{eqnarray} P(|X-\mu| > k) & = & P(|X-\mu|^2 > k^2)\\ & \leq & \frac{\mathbb{E}\left[|X-\mu|^2\right]}{k^2}\\ & \leq & \frac{\mathrm{Var}[X]}{k^2} \end{eqnarray}$

:::
:::

## Call-Outs

Call-Out blocks are explained [here](https://quarto.org/docs/authoring/callouts.html).

```
::: {.callout-note}
This is a call-out.
:::

::: {.callout-warning}
This is a call-out.
:::

::: {.callout-important}
This is a call-out.
:::

::: {.callout-tip}
This is a call-out.
:::

::: {.callout-caution}
This is a call-out.
:::
```

::: callout-note
This is a call-out.
:::

::: callout-warning
This is a call-out.
:::

::: callout-important
This is a call-out.
:::

::: callout-tip
This is a call-out.
:::

::: callout-caution
This is a call-out.
:::

## Tables
### Manual

For simple cases, tables can be manually created in markdown.

::: {.grid}
::: {.g-col-7}

```
|speed|dist|
|-----|----|
|4    |   2|
|4    |  10|
|7    |   4|
```

:::
::: {.g-col-5}

| speed | dist |
|-------|------|
| 4     | 2    |
| 4     | 10   |
| 7     | 4    |

:::
:::

### kable

Simple table using `kable` from R package `knitr`. This is the default output for quarto.

```{r}
library(knitr)
head(iris)
```

#### Layout

````
```{{r}}
#| column: body-outset
#| label: tbl-dual-table
#| tbl-cap: "Example"
#| tbl-subcap:
#|   - "Cars"
#|   - "Pressure"
#| layout-ncol: 2

kable(head(cars))
kable(head(pressure))
```
````

```{r}
#| echo: false
#| column: body-outset
#| label: tbl-dual-table
#| tbl-cap: "Example"
#| tbl-subcap:
#|   - "Cars"
#|   - "Pressure"
#| layout-ncol: 2

kable(head(cars))
kable(head(pressure))
```

#### Cross referencing

Images and tables can be automatically numbered by using `label` attribute. Image label must start with `fig-` and tables with `tbl-`. Tables and images can also be cross-referenced when using the `label` attribute. For example, the table above can be referenced like `@tbl-dual-table` which renders as @tbl-dual-table.

#### Margin table

````
```{{r}}
#| fig-caption: This table is in the margin.
#| column: margin

head(cars)
```
````

```{r}
#| fig-caption: This table is in the margin.
#| column: margin
#| echo: false

head(cars)
```

### gt

Tables using the [gt](https://gt.rstudio.com/) package. A structured approach to creating tables using grammar of tables with extensive customization options.

```{r}
library(gt)

iris %>%
  group_by(Species) %>%
  slice(1:4) %>%
  gt() %>%
  cols_label(
    Sepal.Length = "Sepal Length", Sepal.Width = "Sepal Width",
    Petal.Length = "Petal Length", Petal.Width = "Petal Width"
  ) %>%
  tab_source_note(
    source_note = md("Source: Iris data. Anderson, 1936; Fisher, 1936)")
  )
```

### DT

Interactive table using R package [`DT`](https://rstudio.github.io/DT/). DT tables do not work in confluence.

```{r}
#| eval: false
#| tbl-cap: Table using datatable.
library(DT)

iris %>%
  slice(1:15) %>%
  datatable(options = list(pageLength = 7))
```

### reactable

Advanced interactive tables with [reactable](https://glin.github.io/reactable/index.html). reactables do not work in confluence.

```{r}
#| eval: false
library(reactable)

reactable(iris[sample(1:150, 10), ],
  columns = list(
    Sepal.Length = colDef(name = "Sepal Length"),
    Sepal.Width = colDef(name = "Sepal Width"),
    Petal.Width = colDef(name = "Petal Width"),
    Petal.Width = colDef(name = "Petal Width")
  ),
  striped = TRUE,
  highlight = TRUE,
  filterable = TRUE
)
```

## Layout

### Span

`[Content inside span]{style="background-color: gray"}`

[Content inside span]{style="background-color: gray"}

### Div

```
::: {style="background-color: gray"}
Content inside div
:::
```

::: {style="background-color: gray"}
Content inside div
:::

Divs can be nested like this:

```
:::: {.class}
::: {.class}
:::
::::
```

Both spans and divs support attributes in this specific order: identifiers, classes, and then key-value attributes.

`[Content inside span]{#id .class key1="val1" key2="val2"}`

### Hidden div

```
::: {.hidden}
Hidden content
:::
```

### Conditional content

````
::: {{.content-visible when-format="html"}}
Will only appear in HTML.
:::
````

````
::: {{.content-hidden when-format="html"}}
Will not appear in HTML.
:::
````

Conditional content is documented [here](https://quarto.org/docs/authoring/conditional.html).

### Inner columns

Organisation of content into columns within the body container.

```
:::: {.columns}
::: {.column style="background-color: aliceblue"}
Content is left.
:::
::: {.column style="background-color:  #f5b7b1"}
Content is right.
:::
::::
```

::: columns
::: {.column style="background-color: aliceblue"}
Content in left column.
:::

::: {.column style="background-color:  #f5b7b1"}
Content in right column.
:::
:::

<br>

This is an example of nested columns.

```
:::: {.columns}

::: {.column style="background-color: aliceblue"}
Content in left column.
:::

::: {.column}
Content in right column.

:::: {.columns}
::: {.column style="background-color: #d0ece7"}
Nested left.
:::
::: {.column style="background-color: #f2d7d5"}
Nested right.
:::
::::

:::

::::
```

::: columns
::: {.column style="background-color: aliceblue"}
Content in left column.
:::

::: column
Content in right column.

::: columns
::: {.column style="background-color: #d0ece7"}
Nested left.
:::

::: {.column style="background-color: #f2d7d5"}
Nested right.
:::
:::
:::
:::

### Outer columns

Extending content outside the body container.

```
::: {.column-body style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body
:::

::: {.column-body-outset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset
:::

::: {.column-page-inset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset
:::

::: {.column-page style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page
:::

::: {.column-screen-inset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset
:::

::: {.column-screen style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen
:::

::: {.column-body-outset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset-right
:::

::: {.column-page-inset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset-right
:::

::: {.column-page-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-right
:::

::: {.column-screen-inset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset-right
:::

::: {.column-screen-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-right
:::

::: {.column-body-outset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset-left
:::

::: {.column-page-inset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset-left
:::

::: {.column-page-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-left
:::

::: {.column-screen-inset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset-left
:::

::: {.column-screen-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-left
:::

::: {.column-margin style="background-color: lightgray; margin-bottom:0.5em;"}
.column-margin
:::
```

::: {.column-body style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body
:::

::: {.column-body-outset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset
:::

::: {.column-page-inset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset
:::

::: {.column-page style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page
:::

::: {.column-screen-inset style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset
:::

::: {.column-screen style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen
:::

::: {.column-body-outset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset-right
:::

::: {.column-page-inset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset-right
:::

::: {.column-page-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-right
:::

::: {.column-screen-inset-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset-right
:::

::: {.column-screen-right style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-right
:::

::: {.column-body-outset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-body-outset-left
:::

::: {.column-page-inset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-inset-left
:::

::: {.column-page-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-page-left
:::

::: {.column-screen-inset-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-inset-left
:::

::: {.column-screen-left style="background-color: lightgray; margin-bottom:0.5em;"}
.column-screen-left
:::

::: {.column-margin style="background-color: lightgray; margin-bottom:0.5em;"}
.column-margin
:::

### Panel layout

```
::: {.panel-tabset}
#### Sub topic 1

This is some material for topic 1.

#### Sub topic 2

This is some material for topic 2.

:::
```

::: panel-tabset
#### Sub topic 1

This is some material for topic 1.

#### Sub topic 2

This is some material for topic 2.
:::

More layout settings are described [here](https://quarto.org/docs/authoring/article-layout.html) and [here](https://quarto.org/docs/output-formats/page-layout.html).

## Static plots

### Base plot

-   Plots using base R are widely used and may be good enough for most situations.
-   But they lack a consistent coding framework.


```{r}
#| fig-height: 6
#| fig-width: 6
#| label: fig-plot-base
#| fig-cap: Static plot using base plot.

{
  plot(x=iris$Sepal.Length,y=iris$Sepal.Width,
      col=c("coral","steelblue","forestgreen")[iris$Species],
      xlab="Sepal Length",ylab="Sepal Width",pch=19)

  legend(x=7,y=4.47,legend=c("setosa","versicolor","virginica"),
        col=c("coral","steelblue","forestgreen"),pch=19)
}
```

#### Multiple plots

This does not work.

````
```{{r}}
#| eval: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-cap:
#|   - "Scatterplot of speed vs distance"
#|   - "Pairwise scatterplot of all variables"
#|   - "Scatterplot of temperature vs pressure"

plot(cars)
plot(iris)
plot(pressure)
```
````

#### Margin plot

```{{{r}}}
#| column: margin

plot(cars)
```

```{r}
#| column: margin

plot(cars)
```

### ggplot2

R package [`ggplot2`](http://ggplot2.org/) is one of the most versatile and complete plotting solutions.

```{r}
#| fig-height: 6
#| fig-width: 8
#| label: plot-ggplot
#| fig-cap: Static plot using ggplot2.
#| cap-location: margin
library(ggplot2)

iris %>%
  ggplot(aes(x=Sepal.Length,y=Sepal.Width,col=Species))+
  geom_point(size=2)+
  labs(x="Sepal Length",y="Sepal Width")
```

## ObservableJS

Quarto supports [ObservableJS](https://observablehq.com/) for interactive visualisations in the browser.

Pass data from R to OJS

```{r}
irism <- iris
colnames(irism) <- gsub("[.]","_",tolower(colnames(irism)))
ojs_define(ojsd = irism)
```

```{ojs}
ojsdata = transpose(ojsd)
```

Display as a table

```{ojs}
viewof filtered_table = Inputs.table(ojsdata)
```

Define inputs

```{ojs}
viewof x = Inputs.select(Object.keys(ojsdata[0]), {value: "sepal_length", multiple: false, label: "X axis"})
```

```{ojs}
viewof y = Inputs.select(Object.keys(ojsdata[0]), {value: "sepal_width", multiple: false, label: "Y axis"})
```

Display plot

```{ojs}
Plot.plot({
  marks: [
    Plot.dot(ojsdata, {
      x: x,
      y: y,
      fill: "species",
      title: (d) =>
        `${d.species} \n Petal length: ${d.petal_length} \n Sepal length: ${d.sepal_length}`
    })
  ],
  grid: true
})
```

ObservableJS in quarto [documentation](https://quarto.org/docs/interactive/index.html#observable-js).

## Confluence Storage Format (CSF)

[CSF](https://confluence.atlassian.com/doc/confluence-storage-format-790796544.html) is an XML markup language used by Atlassian Confluence to represent content. Quarto supports CSF for creating Confluence documents. It is similar to HTML in many ways but with confluence specific tags.

Here is an example of a task list.

````
```{=confluence}
<ac:task-list>
    <ac:task>
        <ac:task-id>1</ac:task-id>
        <ac:task-status>complete</ac:task-status>
        <ac:task-body><span class="placeholder-inline-tasks">Wake Up</span></ac:task-body>
    </ac:task>
    <ac:task>
        <ac:task-id>2</ac:task-id>
        <ac:task-status>incomplete</ac:task-status>
        <ac:task-body><span class="placeholder-inline-tasks">Brush Teeth</span></ac:task-body>
    </ac:task>
    <ac:task>
        <ac:task-id>3</ac:task-id>
        <ac:task-status>incomplete</ac:task-status>
        <ac:task-body><span class="placeholder-inline-tasks">Eat Breakfast</span></ac:task-body>
    </ac:task>
</ac:task-list>
```
````

```{=confluence}
<ac:task-list>
    <ac:task>
        <ac:task-id>1</ac:task-id>
        <ac:task-status>complete</ac:task-status>
        <ac:task-body><span class="placeholder-inline-tasks">Wake Up</span></ac:task-body>
    </ac:task>
    <ac:task>
        <ac:task-id>2</ac:task-id>
        <ac:task-status>incomplete</ac:task-status>
        <ac:task-body><span class="placeholder-inline-tasks">Brush Teeth</span></ac:task-body>
    </ac:task>
    <ac:task>
        <ac:task-id>3</ac:task-id>
        <ac:task-status>incomplete</ac:task-status>
        <ac:task-body><span class="placeholder-inline-tasks">Eat Breakfast</span></ac:task-body>
    </ac:task>
</ac:task-list>
```

Here are examples of an emojis.

````
```{=confluence}
<ac:emoticon ac:name="smile" />
<ac:emoticon ac:name="cheeky" />
<ac:emoticon ac:name="tick" />
<ac:emoticon ac:name="warning" />
```
````

```{=confluence}
<ac:emoticon ac:name="smile" />
<ac:emoticon ac:name="cheeky" />
<ac:emoticon ac:name="tick" />
<ac:emoticon ac:name="warning" />
```

A decision list.

````
```{=confluence}
<ac:adf-extension>
    <ac:adf-node type="decision-list">
        <ac:adf-attribute key="local-id">ad7b0a98-1e3e-4863-8f23-ff44dbd7dfa1</ac:adf-attribute>
        <ac:adf-node type="decision-item">
            <ac:adf-attribute key="local-id">c25ea574-62d6-4770-bf11-5a27f3309d56</ac:adf-attribute>
            <ac:adf-attribute key="state">DECIDED</ac:adf-attribute>
            <ac:adf-content>Use Quarto</ac:adf-content>
        </ac:adf-node>
    </ac:adf-node>
    <ac:adf-fallback>
        <ul class="decision-list">
            <li>Use Quarto</li>
        </ul>
    </ac:adf-fallback>
</ac:adf-extension>
```
````

```{=confluence}
<ac:adf-extension>
    <ac:adf-node type="decision-list">
        <ac:adf-attribute key="local-id">ad7b0a98-1e3e-4863-8f23-ff44dbd7dfa1</ac:adf-attribute>
        <ac:adf-node type="decision-item">
            <ac:adf-attribute key="local-id">c25ea574-62d6-4770-bf11-5a27f3309d56</ac:adf-attribute>
            <ac:adf-attribute key="state">DECIDED</ac:adf-attribute>
            <ac:adf-content>Use Quarto</ac:adf-content>
        </ac:adf-node>
    </ac:adf-node>
    <ac:adf-fallback>
        <ul class="decision-list">
            <li>Use Quarto</li>
        </ul>
    </ac:adf-fallback>
</ac:adf-extension>
```

Here is a page tree.

````
```{=confluence}
<ac:structured-macro ac:name="pagetree" ac:schema-version="1" ac:local-id="19b56ab5-7126-4b5c-bb75-03763218ffc4" ac:macro-id="2889812da02196ef0d0256f347599000">
    <ac:parameter ac:name="root">
        <ac:link>
            <ri:page ri:content-title="@self" />
        </ac:link>
    </ac:parameter>
    <ac:parameter ac:name="startDepth">2</ac:parameter>
</ac:structured-macro>
```
````

```{=confluence}
<ac:structured-macro ac:name="pagetree" ac:schema-version="1" ac:local-id="19b56ab5-7126-4b5c-bb75-03763218ffc4" ac:macro-id="2889812da02196ef0d0256f347599000">
    <ac:parameter ac:name="root">
        <ac:link>
            <ri:page ri:content-title="@self" />
        </ac:link>
    </ac:parameter>
    <ac:parameter ac:name="startDepth">2</ac:parameter>
</ac:structured-macro>
```

## Publishing

A quarto document can be published to a confluence page using the `quarto publish` command. The command requires a configuration file `_publish.yml` that specifies the confluence server.
